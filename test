사전 강의

클라우드 네이티브 어플리케이션과 마이크로 서비스 아키텍쳐와 관계를 보면
클라우드 네이티브한 어프리케이션의 속성을 내기 위해서 마이크로 서비스의 루즐리 커플드한 어프로치는 상당히 중요한 코어에 해당하는 디자인 철학이라고 볼 수 있고

이것을 컨테이너(라이트 웨이트한) 도커같은 컨테이너에 잘 감싸서 이것을 자동화된 기법으로 매니징하는 쿠버네티스와 같은 컨테이너 오케스터레이터 위에다가 
클라우드 기반의 어떤 자동화된 데브옵스가 가능하게끔 만들면 그걸 클라우드 네이티브 어플리케이션이라고 보고 있습니다.

클라우드 네이티브 어플리케이션 설계에 있어서 코어, 허트는 마이크로서비스아키텍처의 디자인이다라고 평가할 수 있다.

서비스 기획 시 자동화된 회복과 장애 전파 최소화를 염두
무정지로 배포하고 문제 생겼을 때 쉽게 롤백할 수 있도록

========================================================================================

리눅스 커널
사용자가 System call을 통해 컴퓨터 자원을 사용할 수 있게 도와주는 자원 관리자이다.

컴퓨터는 하드웨어와 소프트웨어
하드웨어는 물리적
소프트웨어는 운영체제와 응용 프로그램
운영체제는 커널과 시스템 프로그램

커널은 컴퓨터의 자원만 바라보고 있고 사용자와의 상호 작용은 하지 않음
커널이 사용자와의 상호 작용을 하기 위해서는 시스템 프로그램이 필요함
그래서 운영체제는 커널과 시스템 프로그램을 함께 제공함
대표적인 시스템 프로그램은 쉘(shell)이라는 명령어 해석기
쉘은 사용자가 컴퓨터에게 전달하는 명령어를 해석함

커널의 구조
커널의 가장 큰 역할을 컴퓨터의 물리적(=하드웨어) 자원과 추상화 자원을 관리하는 것
추상화라 하면 하나의 하드웨어를 여러개의 하드웨어인 것처럼 보여지도록 하는 기술
커널은 하나의 하드웨어 자원을 여러 사용자들을 위한 복수개의 추상화된 객체로 관리

물리적 자원을 추상화한 자원으로 지칭하는 이름
CPU-Task
메모리-페이지, 세그먼트
디스크-파일
네트워크-소켓

커널은! 물리자원과 추상화된 자원을 관리하는 것
그래서 커널의 구성요서는 여러 관리자
태스크(Task) 관리자, 메모리 관리자, 디스크 관리자, 네트워크 관리자, 디바이스 드라이버 관리자

커널이 자원을 관리해야하는 이유
사용자와 상호작용하기 위함, 사용자가 물리적 하드웨어에 접근하고 사용하기 위한 연결고리임

사용자 영역(User Space)에서 커널 영역으로 가기 위해서는 System Call Interface를 통과하며
시스템 콜 인터페이스는 UI라고 볼 수 있을 것 같고 UI를 통해서 커널 영역의 여러 관리자를 컨트롤하여
물리적 하드웨어 자원에 접근하고 사용한다.

리눅스 컨테이너는 운영체제 수준의 가상화 기술로 리눅스 커널을 공유하면서 프로세스를 격리된 환경에서 실행하는 기술이다.

하드웨어를 가상화하는 가상 머신과 달리 커널을 공유하는 방식이므로 속도가 빠르고 성능 상의 손실이 없다.
컨테이너로 실행된 프로세스는 커널을 공유하지만 리눅스 네임스페이스, 컨트롤그룹, 루트 디렉토리 격리 등의 커널 기능을 통해 격리되어 실행된다. 
이러한 격리 기술덕분에 호스트 머신에서는 프로세스로 인식되지만 컨테이너 관점에서는 마치 독립적인 환경을 가진 가상 머신처럼 보인다.

컨테이너의 종류
시스템 컨테이너와 애플리케이션 컨테이너

