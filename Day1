Micro Service Modeling

마이크로 서비스는 작은 서비스를 말함
작은 기준은 관심사가 분리된 서비스임

예를 들어 쇼핑몰은
상품 서비스, 배송 서비스, 주문 서비스가 있다

마이크로 서비스의 반대는 레가시의 모노리스(Monolith)
위의 서비스가 하나의 덩어리로 되어 있음

마이크로 서비스는 전부 나뉘어져 있음 관심사, 주제로(Single Concern)

교재 173p
마이크로서비시스 아키텍쳐
이너와 아웃터로 구성됨

이너에는 아키텍쳐 관련됨(서비스 관련됨)
폴리그랏(Polyglot)은
모노리스의 경우에는 사용 언어가 하나이고, DB도 하나임
반대로 마이크로 서비스는 전부 선택할 수 있음(독립적으로)
우리팀의 아키텍처를 선정하면 됨

아우터는 런타임과 관련된 기술 스택 관렴임(서비스 제외한 나머지 영역)
APIM 단일 진입점
서비스 메쉬 - 통신을 담당
백킹 서비스(Backing Service)
텔레메트리(Telemetry) - 모니터링 하기 위함
CI/CD - 배포 툴체임

External Gateway
게이트웨이에서 서비스에 따라 나눠줌
모노리스는 웹서버 하나에 와스 하나인데 마이크로 서비스는 모두 나뉘어져 있으므로
각 서비스에 맞게 라우팅해줌

게이트웨이에서 인증/인가를 해주고
나머지에서는 그 정보를 받아서 쓰기만 함

PaaS 플랫폼이 필요함
WAS에서 마이크로 서비스를 올리지 못하고 그 위에 컨테이너에서 올릴 수 있음
컨테이너 런타임(환경)이 필요함 그게 클라우드이고 네이티브 클라우드한 환경에서 돌아가는 것임

DBMS per Service(폴리글랏 한 아키텍쳐이므로)
각 서비스는 데이터베이스를 다르게 할 수 있고 안 쓸 수도 있음

Scheme per Service(레가시에서 많이 씀)
데이터베이스는 하나이고 디비 계정을 분리해서 쓰는 것

============================================================================================================================
Agile 의 정의 
애자일에 필요한 것들 데브옵스, 마이크로서비스, 컨테이너, 클라우드
데브옵스 - 개발과 인프라의 구분이 없음, 팀 자체적으로 함

우리팀의 서비스가 다른팀의 DB를 리드하거나 하면 안된다 - 제프베조스의 의무사항

모노리스의 단점 - 캐스케이드 실패

반대로 마이크로 서비스의 아키텍처
헥사고날 

MSA와 SOP의 차이
SOA는 DB가 하나임, 재사용성을 강조하고 있음, 중복투자 방지
MSA는 재사용성을 지양함, SPOF, 장애전파를 방지하기 위함
루즐리 커플드하다

MSA는 각 서비스의 통신이 필요할 때는 REST로 메시징 기반의 비동기 방식으로 한다

EDA(Event Drivennn Architecture)
EDA 기반의 MSA는 장애 전파를 최소화할 수 있는 장점

MSA의 단점
분산환경이기 때문에 트랜잭션(데이터 일관성)을 맞추기 힘들다
이런 단점을 보완하기 위한 MSA 패턴이 있음

장애전파 차단 : 서킷브레이커 패턴
뒷 단의 서비스에서 장애가 발생했을 때 그 앞에서 서킷 브레이크가 작동하여 뒷 단의 서비스가 회복될 때까지 시간을 벌어줌

3세대 MSA는 EDA를 지향하고 있음
서비스간 직접 통신을 하지 않고 메시징 기반의 통신을 함

발행할 때는 주황색
구독할 때는 보라색

Saga Pattern
주문을 했는데 재고가 없다 했을 때 

Micro Service Modeling

마이크로 서비스는 작은 서비스를 말함
작은 기준은 관심사가 분리된 서비스임

예를 들어 쇼핑몰은
상품 서비스, 배송 서비스, 주문 서비스가 있다

마이크로 서비스의 반대는 레가시의 모노리스(Monolith)
위의 서비스가 하나의 덩어리로 되어 있음

마이크로 서비스는 전부 나뉘어져 있음 관심사, 주제로(Single Concern)

교재 173p
마이크로서비시스 아키텍쳐
이너와 아웃터로 구성됨

이너에는 아키텍쳐 관련됨(서비스 관련됨)
폴리그랏(Polyglot)은
모노리스의 경우에는 사용 언어가 하나이고, DB도 하나임
반대로 마이크로 서비스는 전부 선택할 수 있음(독립적으로)
우리팀의 아키텍처를 선정하면 됨

아우터는 런타임과 관련된 기술 스택 관렴임(서비스 제외한 나머지 영역)
APIM 단일 진입점
서비스 메쉬 - 통신을 담당
백킹 서비스(Backing Service)
텔레메트리(Telemetry) - 모니터링 하기 위함
CI/CD - 배포 툴체임

External Gateway
게이트웨이에서 서비스에 따라 나눠줌
모노리스는 웹서버 하나에 와스 하나인데 마이크로 서비스는 모두 나뉘어져 있으므로
각 서비스에 맞게 라우팅해줌

게이트웨이에서 인증/인가를 해주고
나머지에서는 그 정보를 받아서 쓰기만 함

PaaS 플랫폼이 필요함
WAS에서 마이크로 서비스를 올리지 못하고 그 위에 컨테이너에서 올릴 수 있음
컨테이너 런타임(환경)이 필요함 그게 클라우드이고 네이티브 클라우드한 환경에서 돌아가는 것임

DBMS per Service(폴리글랏 한 아키텍쳐이므로)
각 서비스는 데이터베이스를 다르게 할 수 있고 안 쓸 수도 있음

Scheme per Service(레가시에서 많이 씀)
데이터베이스는 하나이고 디비 계정을 분리해서 쓰는 것

============================================================================================================================
Agile 의 정의 
애자일에 필요한 것들 데브옵스, 마이크로서비스, 컨테이너, 클라우드
데브옵스 - 개발과 인프라의 구분이 없음, 팀 자체적으로 함

우리팀의 서비스가 다른팀의 DB를 리드하거나 하면 안된다 - 제프베조스의 의무사항

모노리스의 단점 - 캐스케이드 실패

반대로 마이크로 서비스의 아키텍처
헥사고날 

MSA와 SOP의 차이
SOA는 DB가 하나임, 재사용성을 강조하고 있음, 중복투자 방지
MSA는 재사용성을 지양함, SPOF, 장애전파를 방지하기 위함
루즐리 커플드하다

MSA는 각 서비스의 통신이 필요할 때는 REST로 메시징 기반의 비동기 방식으로 한다

EDA(Event Drivennn Architecture)
EDA 기반의 MSA는 장애 전파를 최소화할 수 있는 장점

MSA의 단점
분산환경이기 때문에 트랜잭션(데이터 일관성)을 맞추기 힘들다
이런 단점을 보완하기 위한 MSA 패턴이 있음

장애전파 차단 : 서킷브레이커 패턴
뒷 단의 서비스에서 장애가 발생했을 때 그 앞에서 서킷 브레이크가 작동하여 뒷 단의 서비스가 회복될 때까지 시간을 벌어줌

3세대 MSA는 EDA를 지향하고 있음
서비스간 직접 통신을 하지 않고 메시징 기반의 통신을 함

발행할 때는 주황색
구독할 때는 보라색

Saga Pattern
주문을 했는데 재고가 없다 했을 때 


