TokenRelay

모노리스
- 컨선이 밍글되어 있을 때, 여러가지가 섞여 있음
 - 페인 클라이언트
 - api.url yaml 파일에 있음

서킷브레이커를 통하여 장애 전파를 원천 차단
hystrix:
  command:
    # 전역설정
    default:
      execution.isolation.thread.timeoutInMilliseconds: 610 #0.61초 0.6초 이내에 실행이 되어야 함

fallback 옵션
@FeignClient(name ="delivery", url="${api.url.delivery}", fallback = DeliveryServiceImpl.class)
500 오류가 났을 때 리턴해주는 내용

SPOF
스팟이 없는 환경 구성이 바람직하다

재사용하지 않고 중복 구현하는 것이 MSA 스러운 것

DBMS per Svc
Scheme per Svc DB는 하나고 각 서비스마다 스키마를 두는 것
다른 팀의 DB를 조회할 수 없음 권한 절대 없음 마크 제조스

카프카 서버 = 카프카 브로커 = 부트스트랩 서버 = 클러스터
topic = 단톡방 개념
event sourcing - 레코드 replay 가능함
--from-beginning 옵션 = 처음부터 다 불러옴

컨슈머 그룹과 오프셋(책갈피=가장 마지막 부분을 오프셋으로 기억함)

Lagging이 쌓이면 Scale Out 해서 리소스를 넓혀줘야 함.
Lagging이 0이면 잘 쌓이고 있다는 뜻

컨슈머 설정은 application.yml event-in.group에 있음

cncf.io graduated 믿고 쓰는 오픈소스

파티션을 줄이는건 불가능함

브로커는 3개로 시작하여 100개까지 늘어날 수 있음

zookeeper 카프카의 코디네이터
카프카는 주키퍼 없이 동작 못함
리플리케이션 팩터는 토픽의 수보다 같거나 많아야한다

파티션의 리더만 데이터를 읽고 쓰기가 가능하다

프로듀서
메세지를 전송할 때 메세지만 보낼 수도 있고 key 옵션을 줄 수 있는데
key 옵션을 주면 특정 파티션에 메세지를 보낼 수 있다.
key 옵션이 없으면 라운드로빈 방식으로 균등하게 보낸다.
key 옵션을 통해서 특정 파티션으로 메시지를 보내도록 설정해놨는데 그 파티션이 죽으면
자동으로 리플리케이션으로 보낸다.
리더가 죽으면 리프리카 중 하나가 리더가 되고 리더와 ISR 간의 파티션 번호는 동일하기 때문에
Seamless한 서비스가 보장된다.

프로듀서 acks 설정??
프로듀서가 사용하는 acks 옵션은 간단하게 말해 프로듀서가 메시지를 보내고 
그 메시지를 카프카가 잘 받았는지 확인을 할 것인지 또는 확인을 하지 않을 것인지를 결정하는 옵션입니다.

파티션 수보다 컨슈머 수가 많으면 매칭이 안됨
파티션 하나가 같은 컨슈머 그룹의 컨슈머랑 매칭할 수 없음

카프카 커넥트(카프카가 제공하고 메커니즘은 똑같으나, 또다른 데이터 동기화 기능, 데몬)

Dead Letter Queue - 커넥트에서 커넥터 오류를 처리하는 방법

Pub-Sub
쓰기 - Saga패턴
읽기 - 

주문 확인 및 주문 취소 카프카 확인
